/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../context"
import type { DayRecordsModel, FoodItemModel, LoginResultModel, RecordModel, RecordFeedModel, TotalsModel, UserModel, WeekRecordsModel, WeeklyRecordsFeedModel } from "./../db/models/index"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: Date
}

export interface NexusGenObjects {
  DayRecords: DayRecordsModel;
  FoodItem: FoodItemModel;
  LoginResult: LoginResultModel;
  Mutation: {};
  Query: {};
  Record: RecordModel;
  RecordFeed: RecordFeedModel;
  Totals: TotalsModel;
  User: UserModel;
  WeekRecords: WeekRecordsModel;
  WeeklyRecordsFeed: WeeklyRecordsFeedModel;
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  DayRecords: { // field return type
    dayEnd: NexusGenScalars['DateTime']; // DateTime!
    dayStart: NexusGenScalars['DateTime']; // DateTime!
    records: NexusGenRootTypes['Record'][]; // [Record!]!
    totals: NexusGenRootTypes['Totals']; // Totals!
  }
  FoodItem: { // field return type
    calories: number; // Float!
    carbs: number; // Float!
    fat: number; // Float!
    id: string; // ID!
    protein: number; // Float!
    title: string; // String!
    userID: string; // ID!
  }
  LoginResult: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Mutation: { // field return type
    addFoodItem: NexusGenRootTypes['FoodItem'] | null; // FoodItem
    addRecord: NexusGenRootTypes['Record']; // Record!
    addRecordWithFoodItem: NexusGenRootTypes['Record']; // Record!
    deleteRecord: string; // ID!
    updateRecord: NexusGenRootTypes['Record']; // Record!
  }
  Query: { // field return type
    filterFoodItems: NexusGenRootTypes['FoodItem'][]; // [FoodItem!]!
    foodItems: NexusGenRootTypes['FoodItem'][]; // [FoodItem!]!
    getAllRecords: NexusGenRootTypes['Record'][]; // [Record!]!
    getFoodItems: NexusGenRootTypes['FoodItem'][]; // [FoodItem!]!
    getRecord: NexusGenRootTypes['Record'] | null; // Record
    login: NexusGenRootTypes['LoginResult']; // LoginResult!
    recordsFeed: NexusGenRootTypes['RecordFeed']; // RecordFeed!
    totals: NexusGenRootTypes['Totals']; // Totals!
    weeklyRecordsFeed: NexusGenRootTypes['WeeklyRecordsFeed']; // WeeklyRecordsFeed!
  }
  Record: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    eatenAt: NexusGenScalars['DateTime']; // DateTime!
    foodItem: NexusGenRootTypes['FoodItem']; // FoodItem!
    id: string; // ID!
    userID: string; // ID!
    weight: number; // Int!
  }
  RecordFeed: { // field return type
    cursor: string; // String!
    records: NexusGenRootTypes['Record'][]; // [Record!]!
  }
  Totals: { // field return type
    calories: number; // Float!
    carbs: number; // Float!
    fat: number; // Float!
    protein: number; // Float!
  }
  User: { // field return type
    id: string; // ID!
    userName: string; // String!
  }
  WeekRecords: { // field return type
    days: NexusGenRootTypes['DayRecords'][]; // [DayRecords!]!
    totals: NexusGenRootTypes['Totals']; // Totals!
    weekEnd: NexusGenScalars['DateTime']; // DateTime!
    weekStart: NexusGenScalars['DateTime']; // DateTime!
  }
  WeeklyRecordsFeed: { // field return type
    cursor: string; // String!
    weeks: NexusGenRootTypes['WeekRecords'][]; // [WeekRecords!]!
  }
}

export interface NexusGenFieldTypeNames {
  DayRecords: { // field return type name
    dayEnd: 'DateTime'
    dayStart: 'DateTime'
    records: 'Record'
    totals: 'Totals'
  }
  FoodItem: { // field return type name
    calories: 'Float'
    carbs: 'Float'
    fat: 'Float'
    id: 'ID'
    protein: 'Float'
    title: 'String'
    userID: 'ID'
  }
  LoginResult: { // field return type name
    token: 'String'
    user: 'User'
  }
  Mutation: { // field return type name
    addFoodItem: 'FoodItem'
    addRecord: 'Record'
    addRecordWithFoodItem: 'Record'
    deleteRecord: 'ID'
    updateRecord: 'Record'
  }
  Query: { // field return type name
    filterFoodItems: 'FoodItem'
    foodItems: 'FoodItem'
    getAllRecords: 'Record'
    getFoodItems: 'FoodItem'
    getRecord: 'Record'
    login: 'LoginResult'
    recordsFeed: 'RecordFeed'
    totals: 'Totals'
    weeklyRecordsFeed: 'WeeklyRecordsFeed'
  }
  Record: { // field return type name
    createdAt: 'DateTime'
    eatenAt: 'DateTime'
    foodItem: 'FoodItem'
    id: 'ID'
    userID: 'ID'
    weight: 'Int'
  }
  RecordFeed: { // field return type name
    cursor: 'String'
    records: 'Record'
  }
  Totals: { // field return type name
    calories: 'Float'
    carbs: 'Float'
    fat: 'Float'
    protein: 'Float'
  }
  User: { // field return type name
    id: 'ID'
    userName: 'String'
  }
  WeekRecords: { // field return type name
    days: 'DayRecords'
    totals: 'Totals'
    weekEnd: 'DateTime'
    weekStart: 'DateTime'
  }
  WeeklyRecordsFeed: { // field return type name
    cursor: 'String'
    weeks: 'WeekRecords'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addFoodItem: { // args
      calories: number; // Float!
      carbs: number; // Float!
      fat: number; // Float!
      protein: number; // Float!
      title: string; // String!
    }
    addRecord: { // args
      createdAt: NexusGenScalars['DateTime']; // DateTime!
      eatenAt: NexusGenScalars['DateTime']; // DateTime!
      foodItemID: string; // ID!
      weight: number; // Int!
    }
    addRecordWithFoodItem: { // args
      calories: number; // Float!
      carbs: number; // Float!
      createdAt: NexusGenScalars['DateTime']; // DateTime!
      eatenAt: NexusGenScalars['DateTime']; // DateTime!
      fat: number; // Float!
      protein: number; // Float!
      title: string; // String!
      weight: number; // Int!
    }
    deleteRecord: { // args
      id: string; // ID!
    }
    updateRecord: { // args
      id: string; // ID!
      weight: number; // Int!
    }
  }
  Query: {
    filterFoodItems: { // args
      filter: string; // String!
      limit: number; // Int!
    }
    getFoodItems: { // args
      ids: string[]; // [ID!]!
    }
    getRecord: { // args
      id: string; // ID!
    }
    login: { // args
      password: string; // String!
      userName: string; // String!
    }
    recordsFeed: { // args
      cursor: string; // String!
      limit: number; // Int!
    }
    totals: { // args
      endInterval: NexusGenScalars['DateTime']; // DateTime!
      startInterval: NexusGenScalars['DateTime']; // DateTime!
    }
    weeklyRecordsFeed: { // args
      cursor: string; // String!
      limit: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}